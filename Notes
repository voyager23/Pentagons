setupPrimeLinkedList.o : setupPrimeLinkedList.c $(DEPS)
	gcc -c $< $(CFLAGS) $(INC) $(LIB) -o $@

searchPenta.o : searchPenta.c $(DEPS)
	gcc -c $< $(CFLAGS) $(INC) $(LIB) -o $@
	
searchNodesLinkedList.o : searchNodesLinkedList.c $(DEPS)
	gcc -c $< $(CFLAGS) $(INC) $(LIB) -o $@

utilities.o : utilities.c $(DEPS)
	gcc -c $< $(CFLAGS) $(INC) $(LIB) -o $@
	
searchPentagonArray.o : searchPentagonArray.c $(DEPS)
	gcc -c $< $(CFLAGS) $(INC) $(LIB) -o $@	

searchPentagonLinkedList.o : searchPentagonLinkedList.c $(DEPS)
	gcc -c $< $(CFLAGS) $(INC) $(LIB) -o $@	

//======================================================================
	
#if()	
	time_t t1,t2;
	printf("Array search\n");
	time(&t1);
	n_pentagons = searchPentagonArray(&Nodes, &Pentagons, Target);
	time(&t2);
	printf("n_pentagons = %d in %.f seconds\n", n_pentagons,difftime(t2,t1));
	printf("Length of Pentagons list %d\n", g_slist_length(Pentagons));
#endif	

//======================================================================

int add_Pentagons_to_list(GSList**Pentagons, struct ring5 *working) {
	struct ring5 *new_rot, *new_ref;
	int i;
	if(find_Pentagon(Pentagons, working) == 0) {
		// rotations & reflections
		for(i=0;i<5;i++) {
			allocate struct ring5 -> new_rot
			allocate struct ring5 -> new_ref
			deep copy working -> new_rot
			deep copy working -> new_ref
			rotate(new_rot,i)
			rotate(new_ref,i)
			append(Pentagons,new_rot)
			append(Pentagons,new_ref)
		}
	}
}

int find_Pentagon(GSList **Pentagons, struct ring5 working) {
	// Pentagons are found by matching 5 node_id
	GSList *target = *Pentagons;
	int i;
	while(target != NULL) {
		found = 1;
		for(i=0;i<4;i++) {
			if(working->nodes[i] != RPTR(target)->nodes[i]) {
				found=0;
				break;
			}
		}
		if(found==1) break
		
	
}

